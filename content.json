{"posts":[{"title":"环境配置常见指令","text":"1. 一些知识 包管理器 (Package Manager)：用于自动化安装、升级、配置和卸载软件包的工具。pip 是 Python 的官方包管理器，主要用于从 Python Package Index (PyPI) 安装库。conda 是一个开源的包和环境管理系统，不仅可以管理 Python 包，还能管理非 Python 的依赖和库，功能更为强大。 虚拟环境 (Virtual Environment)：一个独立的 Python 运行环境，它允许您为不同的项目安装不同版本的包，从而避免项目间的依赖冲突。使用 conda 或 Python 自带的 venv 模块可以轻松创建和管理虚拟环境。 镜像源 (Mirror Source)：由于官方服务器（如 PyPI, Anaconda.org）位于海外，国内用户直接访问可能速度缓慢或不稳定。镜像源是这些官方服务器在国内的“复制站”，通过配置镜像源，可以显著提升包的下载和安装速度。 2. 终端如何使用管理者模式在 Windows 系统中，某些操作（如全局安装包、修改系统路径等）需要管理员权限。 操作方法：按 Win + R 呼出运行对话框，输入 cmd 或 wt（Windows Terminal，部分系统需单独安装），然后按 Ctrl + Shift + Enter 即可启动管理员模式的终端。 权限影响：在管理员模式下执行 pip install，包通常会被安装到系统级的 Python 目录下（可能在 C 盘或 D 盘，取决于 Python 的安装位置）。在普通用户模式下，包则可能被安装到用户目录下。您可以使用 conda info 或 pip show &lt;包名&gt; 来查看具体安装位置。 3. pip指令pip 是 Python 包管理的核心工具。 1234567891011121314pip install -U pip # 升级 pip 自身pip install --upgrade pip # 同上，升级 pippython -m pip install -U pip # Windows 下推荐的升级方式，确保调用正确的 Pythonpip install SomePackage # 安装最新版本的包pip install SomePackage==1.0.4 # 安装指定版本的包pip install 'SomePackage&gt;=1.0.4' # 安装大于等于指定版本的包pip search SomePackage # 搜索包（注：此功能在新版 pip 中可能已受限）pip show SomePackage # 显示已安装包的基本信息pip show -f SomePackage # 显示已安装包的详细信息（包括文件列表）pip list # 列出所有已安装的包pip list -o # 列出所有可升级的包 4. 常用镜像网站1234中山大学镜像miniconda：https://mirror.sysu.edu.cn/anaconda/miniconda/清华源镜像miniconda：https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/清华源镜像anaconda：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/华为python镜像：https://mirrors.huaweicloud.com/python/ 5. 配置镜像源以及虚拟环境pip 配置镜像源 1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple conda 配置清华镜像源 12345conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/conda config --set show_channel_urls yes conda 配置中科大镜像源 1234567conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/conda config --set show_channel_urls yes conda 常用命令 1234567891011121314conda update conda # 更新conda conda env list 或 conda info -e # 查看有哪些虚拟环境conda create --name demo python=3.7 # 创建虚拟环境conda activate demo # 激活虚拟环境conda deactivate # 退出虚拟环境conda remove --name demo --all -y # 删除虚拟环境 -y用于确定conda info # 查看安装包位置等#查看--安装--更新--删除包conda listconda search package_nameconda install package_nameconda install package_name=1.5.0conda update package_nameconda remove package_name 6. Jupyter Notebook配置虚拟环境为了让 Jupyter Notebook 能够识别并使用您创建的 conda 虚拟环境，需要进行内核注册。 123456789101112conda activate demo # 首先激活您要配置的虚拟环境 &quot;demo&quot;conda install ipykernel # 在该环境中安装 ipykernel 包# 注册内核到 Jupyterpython -m ipykernel install --user --name=demo --display-name &quot;demo&quot;# 参数说明：# --name: 内核的内部名称（用于命令行管理）# --display-name: 在 Jupyter Notebook 界面中显示的名称# 通用格式# python -m ipykernel install --user --name=&lt;内核名称&gt; --display-name &quot;&lt;显示名称&gt;&quot;jupyter kernelspec list # 查看已注册的所有 Jupyter 内核 在 Jupyter Notebook 中切换内核 打开 Jupyter Notebook。 选择菜单栏中的 Kernel -&gt; Change Kernel。 在弹出的列表中，选择您刚刚注册的内核（例如 “demo”）。 提示：如果您在注册时将 --display-name 设置为 demo_1，那么在 Jupyter Notebook 的内核选择列表中，您看到的将是 “demo_1”。 人生最遗憾的，莫过于轻易地放弃了不该放弃的，固执地坚持了不该坚持的。–柏拉图","link":"/2025/09/16/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/"},{"title":"github配置SSH","text":"1. 为什么需要SSHGitHub 使用 SSH（Secure Shell） 是为了在你和 GitHub 服务器之间建立一个安全、加密的通信通道，从而实现安全的身份验证和数据传输。 当执行执行 git push、git pull 或 git clone 等操作时，GitHub 需要知道：“这个请求真的是来自合法的开发者吗？还是有人冒充？” SSH 提供了一种无需密码、但极其安全的身份认证方式——基于 公钥/私钥加密机制。 2. SSH认证原理想象一下： 你有一把“锁”（公钥），把它交给 GitHub，告诉它：“只有拿着对应钥匙的人，才允许访问我的仓库。” 你自己保留那把“钥匙”（私钥），藏在电脑里。 每次你连接 GitHub 时，它会用“锁”来挑战你；只有你能用“钥匙”解开，才能通过验证。 这就是所谓的 非对称加密。 具体流程： 你在本地生成一对密钥：id_ed25519（私钥） 和 id_ed25519.pub（公钥） 把 公钥 添加到你的 GitHub 账户中 当运行git clone git@github.com:user/repo.git时 GitHub 看到你是用 SSH 连接 它检查你的用户名，并查找你账户中是否注册了对应的公钥 然后发起加密挑战 你的本地 SSH agent 使用 私钥 解密并回应 认证成功 → 允许拉取或推送代码 ✅ 整个过程不需要输入密码（除非你给私钥设了 passphrase），而且非常安全。 3. 配置流程 检查本地是否已有 SSH 密钥 1ls -al ~/.ssh/ 如果没有，需生成 1ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; 💡 -t ed25519 是目前最安全高效的算法，GitHub 推荐使用。 启动ssh agent 并添加密钥 12345# 启动 SSH agenteval &quot;$(ssh-agent -s)&quot;# 添加你的私钥到 agentssh-add ~/.ssh/id_ed25519 添加公钥到github 首先复制公钥（锁）内容 1cat ~/.ssh/id_ed25519.pub 输出类似 1ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... your_email@example.com 登录 GitHub → Settings → SSH and GPG keys → New SSH key； 标题（Title）自定义 与设备有关即可 My Laptop； 粘贴上面复制的公钥内容（完整一行）；点击 Add SSH key 测试是否配置成功 1ssh -T git@github.com 无论对个人还是对社会，预防犯罪行为的发生要比处罚已经发生的罚罪行为更有价值，更为重要。–李斯特","link":"/2025/09/20/github%E9%85%8D%E7%BD%AESSH/"},{"title":"推荐系统概述","text":"datawhale fun-rec 学习网址：https://datawhalechina.github.io/fun-rec/ 1. 推荐系统核心定义推荐系统本质：对关系的量化预测，核心公式为：Score = f(User, Item, Context)，微观视角来看是预测用户与物品产生有价值连接的可能性。其核心要素为以下。 用户：历史行为、显式反馈、基本画像、实时意图 物品：内容属性、统计属性（受欢迎程度、互动趋势） 场景：时间、地点、使用环境（工作日/周末、地铁/家中） 2. 推荐系统的三个层次理解从微观视角来看，其核心是关系预测。从最基础的预测单元出发，从”用户可能点击哪个物品”的预测问题开始，通过整合用户、物品、场景信息计算连接可能性。 从工业视角来看，其核心是规模化挑战。 推荐系统工程化面临的核心矛盾：如何在极有限的时间内，从海量的候选中找到最优的推荐结果？亿级用户与亿级物品的实时匹配计算不可行。解决方案：三阶段流水线架构，包括 召回 排序 重排。 召回阶段：从全量库快速筛选几千个候选（追求速度与覆盖度） 排序阶段：对候选进行精确预测（使用复杂模型，追求精度） 重排阶段：优化结果体验（考虑多样性、新颖性、公平性） 在不同阶段采用不同的策略，逐步从“可能相关”筛选到“最优匹配”。召回追求速度和覆盖度，排序追求精度，重排追求体验。每个阶段都有其不可替代的价值，共同构成了工业级推荐系统的技术骨架。 从宏观视角来看，是为了生态系统平衡。推荐系统的最终目标不是单纯追求技术指标的最大化，而是构建一个能让所有参与方长期受益的健康生态。在这个生态中，存在三个基本支点：用户与创作者、内容、平台。核心问题为技术完美的推荐系统≠真正优秀的推荐系统。其中三个主体分别如下。 用户与创作者：既是消费者也是生产者（UGC/PGC/AIGC） 内容：价值的核心媒介（需平衡优质内容与长尾内容） 平台：生态协调者（平衡短期指标与长期健康） 优秀推荐系统是精巧的平衡器，确保三方长期共赢 UGC（User Generated Content）：普通用户自发创作的内容，规模大但质量差异明显。 PGC（Professionally Generated Content）：专业团队或机构生产的内容，通常更稳定、更高质量。 AIGC（AI Generated Content）：由人工智能辅助或自动生成的内容，正在快速兴起，带来新的规模化和个性化可能性 3. 推荐系统三阶段流水线召回的目标是快速筛选候选，特点是速度优先，覆盖度优先，代表方法有协同过滤、向量召回、序列召回。 排序的目标是精确计算分数 ，特点是精度优先，计算成本较高，代表方法有深度学习模型、特征交叉。 重排的目标是优化用户体验，特点是考虑多样性、公平性，代表方法有基于贪心的重排、基于个性化的重排。 4. 推荐系统设计的关键认知 准确率陷阱：技术指标高不等于价值高（如推荐已知商品） 生态思维：推荐系统不仅是技术问题，更是生态平衡问题 动态平衡：需在用户、创作者、内容、平台之间保持动态平衡 长期视角：有时需牺牲短期指标换取长期生态健康","link":"/2025/09/25/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"},{"title":"算法刷题计划","text":"","link":"/2025/09/15/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/"}],"tags":[{"name":"开发知识","slug":"开发知识","link":"/tags/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"},{"name":"推荐系统","slug":"推荐系统","link":"/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"}],"categories":[{"name":"学习","slug":"学习","link":"/categories/%E5%AD%A6%E4%B9%A0/"}],"pages":[{"title":"About","text":"I am a Master of Artificial Intelligence, Jinan University.","link":"/about/index.html"}]}