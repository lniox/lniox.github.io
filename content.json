{"posts":[{"title":"环境配置常见指令","text":"人生最遗憾的， 莫过于轻易地放弃了不该放弃的， 固执地坚持了不该坚持的。——柏拉图 终端如何使用管理者模式win+r 呼出输入框，输入cmd或者wt（wt可能部分系统未安装），ctrl+shift+回车即可使用管理者模式。 在管理者模式下，pip install 的第三方包会下载到D盘，否则在C盘。可以通过conda info查看安装位置。 pip指令1234567891011pip install -U pip # 升级 pippip install --upgrade pip # 同理 linux下python -m pip install -U pip # windows下pip install SomePackage # 最新版本 SomePackage为安装的包名pip install SomePackage==1.0.4 # 指定版本pip install 'SomePackage&gt;=1.0.4' # 最小版本pip search SomePackage # 搜索包pip show SomePackage # 显示安装包信息pip show -f SomePackage # 查看指定包的详细信息pip list # 列出已安装的包pip list -o # 查看可以升级的包 常用镜像网站123中山大学镜像：https://mirror.sysu.edu.cn/anaconda/miniconda/清华源镜像：https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/华为python镜像：https://mirrors.huaweicloud.com/python/ 配置镜像源1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 12345conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/conda config --set show_channel_urls yes 1234567conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/conda config --set show_channel_urls yes 1234567891011121314conda update conda # 更新conda conda env list 或 conda info -e # 查看有哪些虚拟环境conda create --name demo python=3.7 # 创建虚拟环境conda activate demo # 激活虚拟环境conda deactivate # 退出虚拟环境conda remove --name demo --all -y # 删除虚拟环境 -y用于确定conda info # 查看安装包位置等#查看--安装--更新--删除包conda listconda search package_nameconda install package_nameconda install package_name=1.5.0conda update package_nameconda remove package_name Jupyter Notebook配置虚拟环境12345conda activate demo # 激活需要配置的虚拟环境conda install ipykernel # 虚拟环境中安装ipykernelpython -m ipykernel install --user --name=demo --display-name demo # demo为虚拟环境名 ps：python -m ipykernel install --user --name=&lt;内核名称&gt; --display-name &quot;&lt;显示名称&gt;&quot; jupyter kernelspec list # 查看已注册的 Jupyter 内核 在 Jupyter Notebook 中切换内核 打开 Jupyter Notebook，选择菜单栏中的 Kernel -&gt; Change Kernel，然后选择刚刚添加的内核（如 “demo”）。 如果修改--display-name demo为--display-name demo_1，则会在选择页面显示demo_1","link":"/2025/09/16/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/"},{"title":"github配置SSH","text":"无论你从什么时候开始， 重要的是开始后就不要停止。 无论你从什么时候结束， 重要的是结束后就不要悔恨。——柏拉图 1. 为什么需要SSHGitHub 使用 SSH（Secure Shell） 是为了在你和 GitHub 服务器之间建立一个安全、加密的通信通道，从而实现安全的身份验证和数据传输。 当执行执行 git push、git pull 或 git clone 等操作时，GitHub 需要知道：“这个请求真的是来自合法的开发者吗？还是有人冒充？” SSH 提供了一种无需密码、但极其安全的身份认证方式——基于 公钥/私钥加密机制。 2. SSH认证原理想象一下： 你有一把“锁”（公钥），把它交给 GitHub，告诉它：“只有拿着对应钥匙的人，才允许访问我的仓库。” 你自己保留那把“钥匙”（私钥），藏在电脑里。 每次你连接 GitHub 时，它会用“锁”来挑战你；只有你能用“钥匙”解开，才能通过验证。 这就是所谓的 非对称加密。 具体流程： 你在本地生成一对密钥：id_ed25519（私钥） 和 id_ed25519.pub（公钥） 把 公钥 添加到你的 GitHub 账户中 当运行git clone git@github.com:user/repo.git时 GitHub 看到你是用 SSH 连接 它检查你的用户名，并查找你账户中是否注册了对应的公钥 然后发起加密挑战 你的本地 SSH agent 使用 私钥 解密并回应 认证成功 → 允许拉取或推送代码 ✅ 整个过程不需要输入密码（除非你给私钥设了 passphrase），而且非常安全。 3. 配置流程 检查本地是否已有 SSH 密钥 1ls -al ~/.ssh/ 如果没有，需生成 1ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; 💡 -t ed25519 是目前最安全高效的算法，GitHub 推荐使用。 启动ssh agent 并添加密钥 12345# 启动 SSH agenteval &quot;$(ssh-agent -s)&quot;# 添加你的私钥到 agentssh-add ~/.ssh/id_ed25519 添加公钥到github 首先复制公钥（锁）内容 1cat ~/.ssh/id_ed25519.pub 输出类似 1ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... your_email@example.com 登录 GitHub → Settings → SSH and GPG keys → New SSH key； 标题（Title）自定义 与设备有关即可 My Laptop； 粘贴上面复制的公钥内容（完整一行）；点击 Add SSH key 测试是否配置成功 1ssh -T git@github.com","link":"/2025/09/20/github%E9%85%8D%E7%BD%AESSH/"},{"title":"算法刷题计划","text":"","link":"/2025/09/15/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/"}],"tags":[{"name":"开发知识","slug":"开发知识","link":"/tags/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"}],"categories":[{"name":"学习","slug":"学习","link":"/categories/%E5%AD%A6%E4%B9%A0/"}],"pages":[{"title":"About","text":"I am a Master of Artificial Intelligence, Jinan University.","link":"/about/index.html"}]}